from pathlib import Path

import glob
import time
import os
import re
import subprocess

def q3map2(filepath):
    """
    Use q3map2.exe to convert a Q3 BSP to a Q3 MAP.

    filepath: Q3 BSP file path.
    """
    subprocess.check_call([str(Path(os.getcwd()) / "bin" / "q3map2.exe"),
                          "-convert", "-format", "map", "-map", filepath, "-game", "quake3"])
    time.sleep(2)
    filename = Path(filepath.replace('.bsp', '')).name

    if os.path.isfile(Path(os.getcwd()) / 'out' / (filename + '_converted.map')):
        os.remove(Path(os.getcwd()) / 'out' / (filename + '_converted.map'), dir_fd=None)

    os.rename(Path(os.getcwd()) / 'bsp' / (filename + '_converted.map'),
              Path(os.getcwd()) / 'out' / (filename + '_converted.map'))


def cod4_conv(filepath):
    """
    Convert a Q3 MAP to a CoD4 MAP.

    filepath: Q3 MAP file path.
    """
    print("\nConverting " + filepath)
    header = """iwmap 4
"000_Global" flags  active
"The Map" flags"""

    with open(filepath, "r+") as f:
        content = f.read().replace("// Generated by Q3Map2 (ydnar) -convert -format map", "")
        f.seek(0, 0)
        print(">> Rewrite header...")
        f.write(header)
        print(">> Remove patchdefs...")
        content = re.sub(r"\t// patch.*?\n\t}", "", content, flags=re.DOTALL)
        print(">> Fix materials...")
        content = re.sub(r"(?=\b\D\D\D\b).*/\b", " ) ", content)
        print(">> Fix UVs...")
        content = content.replace("0 0 0 0.5 0.5 0 0 0", 
                                  "256 256 0 0 0 0 lightmap_gray 35840 35840 0 0 0 0")
        f.write(content)
        f.truncate()
    print(">> Generate GDT & Batch...")
    make_gdt(filepath)


def make_gdt(filepath):
    """
    Generate a GDT containing all materials from the map with a default configuration,
    and generate a BAT file to compile them quickly with the CoD4 Modtool.
    """
    common_tools = [ "alpha_0", "alpha_100", "alpha_25", "alpha_50", "alpha_75", "antiportal",
                     "areaportal", "botclip", "caulk", "clip", "clusterportal", "cushion", "donotenter",
                     "full_clip", "hint", "hintlocal", "invisible", "lavacaulk", "lightgrid", "metalclip",
                     "mirror1", "missileclip", "nodraw", "nodrawnonsolid", "nodrop", "nolightmap", "origin",
                     "qer_mirror", "qer_portal", "skip", "slick", "slimecaulk", "terrain", "trigger", "watercaulk",
                     "weapclip", "white" ]

    with open(Path(os.getcwd()) / "bin" / "gdt_template", "r") as f:
        gdt_template = f.read()

    with open(filepath, "r") as f:
        content = f.read()
        material_list = re.findall(r"\)(?!.*\))(?:(?!256).)*", content)
        material_unique_list = []
        for i, _ in enumerate(material_list):
            material_list[i] = re.sub(r"[^\w\s-]", "", material_list[i]).strip().lower()
            if material_list[i] and material_list[i] not in material_unique_list \
            and material_list[i] not in common_tools:
                material_unique_list.append(material_list[i])

    with open(filepath.replace('.map','.gdt'), "w") as f_gdt, open(filepath.replace('.map','.bat'), "w") as f_bat:
        f_bat.write("@ECHO OFF\n")
        f_gdt.write("{\n")
        for mtl in material_unique_list:
            f_bat.write("converter -nocachedownload -single material " + mtl + "\n")
            f_gdt.write(gdt_template % (mtl, mtl))
        f_bat.write("pause")
        f_gdt.write("}")


def main():
    """
    Entry point of the program.
    """
    print("""
#####################################
          Q3 Bsp => Q3 Map
#####################################
""")
    for file in glob.glob(str(Path(os.getcwd()) / "bsp" / "*.bsp")):
        q3map2(file)

    print("""
#####################################
         Q3 Map => CoD4 Map
#####################################
""")
    for file in glob.glob(str(Path(os.getcwd()) / "out" / "*.map")):
        cod4_conv(file)

    print("\nDone!")


if (__name__ == "__main__"):
    main()
